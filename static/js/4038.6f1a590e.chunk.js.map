{"version":3,"file":"static/js/4038.6f1a590e.chunk.js","mappings":"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","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/index-Dwpsg6Mq.mjs"],"sourcesContent":["var T = Object.defineProperty;\nvar B = (i, e, t) => e in i ? T(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;\nvar a = (i, e, t) => (B(i, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nimport { cN as g, cS as x, b3 as I, cT as S, bW as A, cD as b, cE as v, as as U, cj as f, d as $, cF as F, cw as d, ax as w, ar as c, cU as E } from \"./index-DV1w5RNX.mjs\";\nimport { a as h, A as C, c as W, b as m, d as k, i as N } from \"./aptos-fTgRd9kK.mjs\";\nimport { r as O } from \"./chain-tk4BDPwT.mjs\";\nclass R {\n  constructor(e, t, s, n, r = !1) {\n    a(this, \"transaction\");\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"description\");\n    a(this, \"parallelizable\");\n    this.transaction = e, this.network = t, this.chain = s, this.description = n, this.parallelizable = r;\n  }\n}\nconst Q = [\n  { name: \"tokenBridgeAddress\", ...g },\n  { name: \"chain\", ...x() },\n  {\n    name: \"domainSeparator\",\n    binary: \"bytes\",\n    custom: I.encode(h),\n    omit: !0\n  },\n  { name: \"tokenId\", ...g },\n  // from https://github.com/aptos-labs/aptos-core/blob/25696fd266498d81d346fe86e01c330705a71465/aptos-move/framework/aptos-framework/sources/account.move#L90-L95\n  { name: \"domainSeparator\", binary: \"bytes\", custom: new Uint8Array([255]), omit: !0 }\n], P = (i) => S(Q, i);\nclass o {\n  constructor(e, t, s, n) {\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"connection\");\n    a(this, \"contracts\");\n    a(this, \"chainId\");\n    a(this, \"tokenBridgeAddress\");\n    this.network = e, this.chain = t, this.connection = s, this.contracts = n, this.chainId = A(t);\n    const r = n.tokenBridge;\n    if (!r)\n      throw new Error(`TokenBridge contract Address for chain ${t} not found`);\n    this.tokenBridgeAddress = r;\n  }\n  static async fromRpc(e, t) {\n    const [s, n] = await C.chainFromRpc(e), r = t[n];\n    if (r.network !== s)\n      throw new Error(\"Network mismatch \" + r.network + \" !== \" + s);\n    return new o(s, n, e, r.contracts);\n  }\n  async isWrappedAsset(e) {\n    try {\n      return await this.getOriginalAsset(e), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getOriginalAsset(e) {\n    const t = e.toString().split(h);\n    let s;\n    if (s = (await this.connection.getAccountResource(t[0], `${this.tokenBridgeAddress}::state::OriginInfo`)).data, !s)\n      throw b;\n    const n = v(parseInt(s.token_chain.number)), r = new U(s.token_address.external_address);\n    return { chain: n, address: r };\n  }\n  async hasWrappedAsset(e) {\n    try {\n      return await this.getWrappedAsset(e), !0;\n    } catch {\n    }\n    return !1;\n  }\n  async getWrappedAsset(e) {\n    const t = await this.getAssetFullyQualifiedType(e);\n    if (!t)\n      throw new Error(\"Invalid asset address.\");\n    return await this.connection.getAccountResource(W(t), `${this.tokenBridgeAddress}::state::OriginInfo`), f(this.chain, t);\n  }\n  async isTransferCompleted(e) {\n    const s = (await this.connection.getAccountResource(this.tokenBridgeAddress, `${this.tokenBridgeAddress}::state::State`)).data.consumed_vaas.elems.handle;\n    try {\n      return await this.connection.getTableItem(s, {\n        key_type: \"vector<u8>\",\n        value_type: \"u8\",\n        key: `0x${$.Buffer.from(F(e.hash)).toString(\"hex\")}`\n      }), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getWrappedNative() {\n    return f(this.chain, m);\n  }\n  async *createAttestation(e, t) {\n    const s = { chain: this.chain, address: new k(e) }, n = await this.getAssetFullyQualifiedType(s);\n    if (!n)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::attest_token::attest_token_entry`,\n      type_arguments: [n],\n      arguments: []\n    }, \"Aptos.AttestToken\");\n  }\n  async *submitAttestation(e, t) {\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin_type`,\n      type_arguments: [],\n      arguments: [d(e)]\n    }, \"Aptos.CreateWrappedCoinType\");\n    const s = await this.getAssetFullyQualifiedType(e.payload.token);\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin`,\n      type_arguments: [s],\n      arguments: [d(e)]\n    }, \"Aptos.CreateWrappedCoin\");\n  }\n  async *transfer(e, t, s, n, r) {\n    const _ = 0n, l = 0n, p = w(s) ? m : s.toString(), u = t.address.toUniversalAddress().toUint8Array(), y = A(t.chain);\n    r ? yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_with_payload_entry`,\n      type_arguments: [p],\n      arguments: [n, y, u, l, r]\n    }, \"Aptos.TransferTokensWithPayload\") : yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_entry`,\n      type_arguments: [p],\n      arguments: [n, y, u, _, l]\n    }, \"Aptos.TransferTokens\");\n  }\n  async *redeem(e, t, s = !0) {\n    const n = t.payload.token.chain === this.chain ? await this.getTypeFromExternalAddress(t.payload.token.address.toString()) : await this.getAssetFullyQualifiedType(t.payload.token);\n    if (!n)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::complete_transfer::submit_vaa_and_register_entry`,\n      type_arguments: [n],\n      arguments: [d(t)]\n    }, \"Aptos.CompleteTransfer\");\n  }\n  async getAssetFullyQualifiedType(e) {\n    return e.chain === this.chain ? N(e.address.toString()) ? e.address.toString() : null : `${o.getForeignAssetAddress(this.chain, this.tokenBridgeAddress, e)}::coin::T`;\n  }\n  /**\n   * Given a hash, returns the fully qualified type by querying the corresponding TypeInfo.\n   * @param address Hash of fully qualified type\n   * @returns The fully qualified type associated with the given hash\n   */\n  async getTypeFromExternalAddress(e) {\n    try {\n      const t = (await this.connection.getAccountResource(this.tokenBridgeAddress, `${this.tokenBridgeAddress}::state::State`)).data, { handle: s } = t.native_infos, n = await this.connection.getTableItem(s, {\n        key_type: `${this.tokenBridgeAddress}::token_hash::TokenHash`,\n        value_type: \"0x1::type_info::TypeInfo\",\n        key: { hash: e }\n      });\n      return n ? [\n        n.account_address,\n        c.decode(n.module_name),\n        c.decode(n.struct_name)\n      ].join(h) : null;\n    } catch {\n      return null;\n    }\n  }\n  /**\n   * Derive the module address for an asset defined by the given origin chain and address.\n   * @param tokenBridgeAddress Address of token bridge (32 bytes)\n   * @param originChain Chain ID of chain that original asset is from\n   * @param originAddress Native address of asset\n   * @returns The module address for the given asset\n   */\n  static getForeignAssetAddress(e, t, s) {\n    if (w(s.address))\n      throw new Error(\"Invalid token address\");\n    const n = P({\n      chain: s.chain,\n      tokenBridgeAddress: new k(t).toUniversalAddress(),\n      tokenId: s.address.toUniversalAddress()\n    });\n    return c.encode(E(n), !0);\n  }\n  createUnsignedTx(e, t, s = !1) {\n    return new R(e, this.network, this.chain, t, s);\n  }\n}\nO(\"Aptos\", \"TokenBridge\", o);\nexport {\n  o as AptosTokenBridge\n};\n"],"names":["T","Object","defineProperty","a","i","e","t","B","enumerable","configurable","writable","value","R","constructor","s","n","r","arguments","length","undefined","this","transaction","network","chain","description","parallelizable","Q","name","g","x","binary","custom","I","encode","h","omit","Uint8Array","o","connection","contracts","chainId","A","tokenBridge","Error","tokenBridgeAddress","fromRpc","C","chainFromRpc","isWrappedAsset","getOriginalAsset","toString","split","getAccountResource","data","b","v","parseInt","token_chain","number","address","U","token_address","external_address","hasWrappedAsset","getWrappedAsset","getAssetFullyQualifiedType","W","f","isTransferCompleted","consumed_vaas","elems","handle","getTableItem","key_type","value_type","key","$","Buffer","from","F","hash","getWrappedNative","m","createAttestation","k","createUnsignedTx","function","type_arguments","submitAttestation","d","payload","token","transfer","p","w","u","toUniversalAddress","toUint8Array","y","redeem","_this","getTypeFromExternalAddress","Promise","reject","N","getForeignAssetAddress","native_infos","account_address","c","decode","module_name","struct_name","join","tokenId","S","E","O"],"sourceRoot":""}