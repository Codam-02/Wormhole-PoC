{"version":3,"file":"static/js/4548.133fd61b.chunk.js","mappings":"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","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/create-Du0Xo8xc.mjs","../node_modules/@wormhole-foundation/wormhole-connect/lib/index-1UYO6C7i.mjs"],"sourcesContent":["import { cW as f, cX as d, cY as y, cZ as A, cF as p, cT as x, c_ as h, c$ as F, d0 as L } from \"./index-DV1w5RNX.mjs\";\nfunction a(o, r) {\n  switch (o.binary) {\n    case \"bytes\":\n      if (\"layout\" in o) {\n        const { custom: t } = o;\n        return t === void 0 || typeof t.from != \"function\" ? e(o.layout, t ? t.from : r) : r;\n      }\n    case \"int\":\n    case \"uint\": {\n      const { custom: t } = o;\n      return o != null && o.omit ? void 0 : d(t) ? t : y(t) ? t.to : r;\n    }\n    case \"array\":\n      return Array.isArray(r) ? r.map((t) => e(o.layout, t)) : void 0;\n    case \"switch\": {\n      const t = r[o.idTag ?? \"id\"], [s, n] = o.layouts.find(([c]) => (Array.isArray(c) ? c[1] : c) == t);\n      return {\n        [o.idTag ?? \"id\"]: t,\n        ...e(n, r)\n      };\n    }\n  }\n}\nfunction e(o, r) {\n  if (r = r ?? {}, f(o))\n    return a(o, r);\n  const t = {};\n  for (const s of o) {\n    const n = a(s, r[s.name] ?? {});\n    n !== void 0 && (t[s.name] = n);\n  }\n  return t;\n}\nfunction i(o, r) {\n  return e(o, r);\n}\nfunction u(o) {\n  return [...h, F(o)];\n}\nfunction b(o, r) {\n  const [t, s] = A(o), n = i(u(o), r);\n  return {\n    protocolName: t,\n    payloadName: s,\n    payloadLiteral: o,\n    ...i(L, r),\n    ...n,\n    hash: p(x(u(o), n))\n  };\n}\nexport {\n  b as c\n};\n","var m = Object.defineProperty;\nvar w = (c, e, r) => e in c ? m(c, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : c[e] = r;\nvar a = (c, e, r) => (w(c, typeof e != \"symbol\" ? e + \"\" : e, r), r);\nimport { C as p, _ as g } from \"./cosmwasm-DHfd5lcQ.mjs\";\nimport { c as l } from \"./create-Du0Xo8xc.mjs\";\nimport { as as u, ar as h } from \"./index-DV1w5RNX.mjs\";\nimport { r as f } from \"./chain-tk4BDPwT.mjs\";\nclass i {\n  constructor(e, r, s, t) {\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"rpc\");\n    a(this, \"contracts\");\n    a(this, \"coreAddress\");\n    this.network = e, this.chain = r, this.rpc = s, this.contracts = t;\n    const n = this.contracts.coreBridge;\n    if (!n)\n      throw new Error(`Wormhole Token Bridge contract for domain ${r} not found`);\n    this.coreAddress = n;\n  }\n  getGuardianSet(e) {\n    throw new Error(\"Method not implemented.\");\n  }\n  getGuardianSetIndex() {\n    throw new Error(\"Method not implemented.\");\n  }\n  getMessageFee() {\n    throw new Error(\"Method not implemented.\");\n  }\n  static async fromRpc(e, r) {\n    const [s, t] = await p.chainFromRpc(e), n = r[t];\n    if (n.network !== s)\n      throw new Error(`Network mismatch: ${n.network} != ${s}`);\n    return new i(s, t, e, n.contracts);\n  }\n  async *publishMessage(e, r, s, t) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async *verifyMessage(e, r) {\n    throw new Error(\"Not implemented.\");\n  }\n  async parseTransaction(e) {\n    const r = await this.rpc.getTx(e);\n    if (!r)\n      throw new Error(\"No transaction found for txid: \" + e);\n    return [i.parseWormholeMessageId(this.chain, this.coreAddress, r)];\n  }\n  async parseMessages(e) {\n    const r = await this.rpc.getTx(e);\n    if (!r)\n      throw new Error(\"No transaction found for txid: \" + e);\n    return [i.parseWormholeMessage(this.chain, this.coreAddress, r)];\n  }\n  static parseWormholeMessage(e, r, s) {\n    const t = s.events.filter((o) => o.type === \"wasm\" && o.attributes[0].key === \"_contract_address\" && o.attributes[0].value === r);\n    if (t.length === 0)\n      throw new Error(\"No wormhole message found in tx\");\n    t.length > 1 && console.error(`Expected single message, found ${t.length}`);\n    const [n] = t, d = Object.fromEntries(n.attributes.map((o) => [o.key.split(\".\")[1], o.value]));\n    return l(\"Uint8Array\", {\n      emitterChain: e,\n      emitterAddress: new u(h.decode(d.sender)),\n      sequence: BigInt(d.sequence),\n      guardianSet: 0,\n      // TODO: need to implement guardian set idx\n      timestamp: Number(d.block_time),\n      consistencyLevel: 0,\n      nonce: Number(d.nonce),\n      signatures: [],\n      payload: h.decode(d.message)\n    });\n  }\n  static parseWormholeMessageId(e, r, s) {\n    const t = i.parseWormholeMessage(e, r, s);\n    return {\n      chain: t.emitterChain,\n      emitter: t.emitterAddress,\n      sequence: t.sequence\n    };\n  }\n}\nf(g, \"WormholeCore\", i);\nexport {\n  i as CosmwasmWormholeCore\n};\n"],"names":["a","o","r","binary","custom","t","from","e","layout","omit","d","y","to","Array","isArray","map","idTag","s","n","layouts","find","_ref","c","f","name","i","u","h","F","b","A","protocolName","payloadName","payloadLiteral","L","hash","p","x","m","Object","defineProperty","w","enumerable","configurable","writable","value","constructor","this","network","chain","rpc","contracts","coreBridge","Error","coreAddress","getGuardianSet","getGuardianSetIndex","getMessageFee","fromRpc","chainFromRpc","publishMessage","verifyMessage","parseTransaction","getTx","parseWormholeMessageId","parseMessages","parseWormholeMessage","events","filter","type","attributes","key","length","console","error","fromEntries","split","l","emitterChain","emitterAddress","decode","sender","sequence","BigInt","guardianSet","timestamp","Number","block_time","consistencyLevel","nonce","signatures","payload","message","emitter","g"],"sourceRoot":""}