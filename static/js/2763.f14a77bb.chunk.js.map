{"version":3,"file":"static/js/2763.f14a77bb.chunk.js","mappings":"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","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/algorand-CuJwCvKw.mjs","../node_modules/@wormhole-foundation/wormhole-connect/lib/chain-tk4BDPwT.mjs"],"sourcesContent":["var C = Object.defineProperty;\nvar x = (s, t, n) => t in s ? C(s, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : s[t] = n;\nvar l = (s, t, n) => (x(s, typeof t != \"symbol\" ? t + \"\" : t, n), n);\nimport { as as _, ca as N, cb as R, b3 as w, aA as I, cc as E, at as T, au as B, cd as i, av as j, aw as U, ax as b, ay as z, az as k, ce as F, cf as $, aC as D } from \"./index-DV1w5RNX.mjs\";\nimport { C as P, P as L } from \"./chain-tk4BDPwT.mjs\";\nconst h = \"Algorand\";\nfunction O(s) {\n  if (s < BigInt(Number.MIN_SAFE_INTEGER) || s > BigInt(Number.MAX_SAFE_INTEGER))\n    throw new Error(\"Integer is unsafe\");\n  return Number(s);\n}\nconst G = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ\", u = class u {\n  constructor(t) {\n    l(this, \"type\", \"Native\");\n    l(this, \"address\");\n    if (u.instanceof(t))\n      this.address = t.address;\n    else if (_.instanceof(t))\n      this.address = t.toUint8Array();\n    else if (t instanceof Uint8Array && t.byteLength === u.byteSize)\n      this.address = t;\n    else if (typeof t == \"string\" && N(t))\n      this.address = R(t).publicKey;\n    else if (typeof t == \"string\" && !isNaN(parseInt(t)))\n      this.address = w.zpad(I.toBytes(BigInt(t), 8), u.byteSize);\n    else if (typeof t == \"bigint\")\n      this.address = w.zpad(I.toBytes(t, 8), u.byteSize);\n    else if (t instanceof Uint8Array && t.byteLength === 8)\n      this.address = w.zpad(t, u.byteSize);\n    else\n      throw new Error(`Invalid Algorand address or ASA ID: ${t}`);\n  }\n  unwrap() {\n    return this.toString();\n  }\n  toString() {\n    return E(this.address);\n  }\n  toNative() {\n    return this;\n  }\n  toUint8Array() {\n    return this.address;\n  }\n  toUniversalAddress() {\n    return new _(this.toUint8Array());\n  }\n  toBigInt() {\n    return I.decode(this.toUint8Array().slice(24, 32));\n  }\n  toInt() {\n    return O(this.toBigInt());\n  }\n  equals(t) {\n    return u.instanceof(t) ? t.address === this.address : this.toUniversalAddress().equals(t);\n  }\n  static instanceof(t) {\n    return t.constructor.platform === h;\n  }\n};\nl(u, \"byteSize\", 32), l(u, \"platform\", h);\nlet m = u;\nT(h, m);\nclass y extends P {\n}\nconst A = class A extends L {\n  constructor(t, n) {\n    super(t, n ?? B(t, A._platform));\n  }\n  getRpc(t) {\n    if (t in this.config)\n      return new i.Algodv2(\"\", this.config[t].rpc);\n    throw new Error(\"No configuration available for chain: \" + t);\n  }\n  getChain(t) {\n    if (t in this.config)\n      return new y(t, this);\n    throw new Error(\"No configuration available for chain: \" + t);\n  }\n  static nativeTokenId(t, n) {\n    if (!A.isSupportedChain(n))\n      throw new Error(`invalid chain for Algorand: ${n}`);\n    return j.chainAddress(n, G);\n  }\n  static isNativeTokenId(t, n, o) {\n    return !A.isSupportedChain(n) || o.chain !== n ? !1 : this.nativeTokenId(t, n) == o;\n  }\n  static isSupportedChain(t) {\n    return U(t) === A._platform;\n  }\n  static async getDecimals(t, n, o) {\n    const r = b(o) ? 0 : new m(o).toInt();\n    if (r === 0)\n      return z(A._platform);\n    const d = await n.getAssetByID(r).do(), a = i.modelsv2.Asset.from_obj_for_encoding(d);\n    if (!a.params || !a.params.decimals)\n      throw new Error(\"Could not fetch token details\");\n    return Number(a.params.decimals);\n  }\n  static async getBalance(t, n, o, r) {\n    const d = b(r) ? 0 : new m(r).toInt();\n    if (d === 0) {\n      const c = await n.accountInformation(o).do(), f = i.modelsv2.Account.from_obj_for_encoding(c);\n      return BigInt(f.amount);\n    }\n    const a = await n.accountAssetInformation(o, d).do(), e = i.modelsv2.AssetHolding.from_obj_for_encoding(a);\n    return BigInt(e.amount);\n  }\n  static async getBalances(t, n, o, r) {\n    let d;\n    if (r.includes(\"native\")) {\n      const e = await n.accountInformation(o).do(), c = i.modelsv2.Account.from_obj_for_encoding(e);\n      d = BigInt(c.amount);\n    }\n    return r.map(async (e) => {\n      if (b(e))\n        return { native: d };\n      const c = new m(e).toInt(), f = await n.accountAssetInformation(o, c).do(), g = i.modelsv2.AssetHolding.from_obj_for_encoding(f);\n      return BigInt(g.amount);\n    }).reduce((e, c) => Object.assign(e, c), {});\n  }\n  static async sendWait(t, n, o) {\n    const a = o.map((g, v) => i.decodeSignedTransaction(g)).map((g, v) => g.txn.txID()), { txId: e } = await n.sendRawTransaction(o).do();\n    if (!e)\n      throw new Error(\"Transaction(s) failed to send\");\n    const c = await i.waitForConfirmation(n, e, 4);\n    if (!i.modelsv2.PendingTransactionResponse.from_obj_for_encoding(c).confirmedRound)\n      throw new Error(\"Transaction(s) could not be confirmed in 4 rounds\");\n    return a;\n  }\n  static async getLatestBlock(t) {\n    const n = await t.status().do(), o = i.modelsv2.NodeStatusResponse.from_obj_for_encoding(n);\n    if (!o.lastRound)\n      throw new Error(\"Error getting status from node\");\n    return Number(o.lastRound);\n  }\n  static async getLatestFinalizedBlock(t) {\n    const n = await t.status().do(), o = i.modelsv2.NodeStatusResponse.from_obj_for_encoding(n);\n    if (!o.lastRound)\n      throw new Error(\"Error getting status from node\");\n    return Number(o.lastRound);\n  }\n  static chainFromChainId(t) {\n    const n = k(A._platform, t);\n    if (n === void 0)\n      throw new Error(`Unknown native chain id ${t}`);\n    const [o, r] = n;\n    return [o, r];\n  }\n  static async chainFromRpc(t) {\n    const n = await t.versionsCheck().do(), o = i.modelsv2.Version.from_obj_for_encoding(n);\n    return this.chainFromChainId(o.genesisId);\n  }\n};\nl(A, \"_platform\", h);\nlet p = A;\nasync function H(s, t) {\n  const [n, o] = await p.chainFromRpc(s);\n  return new K(o, s, t);\n}\nclass K {\n  constructor(t, n, o, r = !1) {\n    l(this, \"_chain\");\n    l(this, \"_debug\");\n    l(this, \"_account\");\n    this._chain = t, this._debug = r, this._account = F(o);\n  }\n  chain() {\n    return this._chain;\n  }\n  address() {\n    return this._account.addr;\n  }\n  async sign(t) {\n    const n = [], o = t.map((a, e) => a.transaction.tx), r = $(o), d = t.map((a, e) => (a.transaction.tx = r[e], a));\n    for (const a of d) {\n      const { description: e, transaction: c } = a, { tx: f, signer: g } = c;\n      this._debug && (console.log(f._getDictForDisplay()), console.log(f.txID())), g ? (this._debug && console.log(`Signing: ${e} with signer ${g.address} for address ${this.address()}`), n.push(await g.signTxn(f))) : (this._debug && console.log(`Signing: ${e} without signer for address ${this.address()}`), n.push(f.signTxn(this._account.sk)));\n    }\n    return n;\n  }\n}\nconst M = {\n  Address: m,\n  Platform: p,\n  getSigner: H,\n  protocols: {\n    WormholeCore: () => import(\"./index-FlkP7OMm.mjs\").then((s) => s.i),\n    TokenBridge: () => import(\"./index-C1QICiJl.mjs\")\n  },\n  getChain: (s, t, n) => new y(t, new p(s, D(s, h, {\n    [t]: n\n  })))\n}, Q = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  default: M\n}, Symbol.toStringTag, { value: \"Module\" }));\nexport {\n  m as A,\n  h as _,\n  p as a,\n  Q as b,\n  O as s\n};\n","var p = Object.defineProperty;\nvar u = (o, t, i) => t in o ? p(o, t, { enumerable: !0, configurable: !0, writable: !0, value: i }) : o[t] = i;\nvar e = (o, t, i) => (u(o, typeof t != \"symbol\" ? t + \"\" : t, i), i);\nimport { cg as d, aw as f, ax as m, ch as w, ci as B, cj as k } from \"./index-DV1w5RNX.mjs\";\nfunction P(o) {\n  return \"getVersion\" in o;\n}\nconst s = {};\nfunction R(o, t, i) {\n  t in s || (s[t] = {});\n  const r = s[t];\n  if (o in r)\n    throw new Error(`Protocol ${o} for protocol ${t} has already registered`);\n  s[t][o] = i;\n}\nfunction C(o, t) {\n  const i = d(o) ? f.get(o) : o;\n  return t in s ? i in s[t] : !1;\n}\nfunction g(o, t) {\n  if (t in s) {\n    const i = s[t];\n    if (i && o in i) {\n      const r = i[o];\n      if (r)\n        return r;\n    }\n  }\n  throw new Error(`No protocols registered for ${o}:${t}. This may be because the platform specific protocol implementation is not registered (by installing and importing it) or no implementation exists for this platform`);\n}\nconst T = (o, t, i, r) => g(o, t).fromRpc(i, r);\nclass W {\n  constructor(t, i) {\n    e(this, \"network\");\n    e(this, \"config\");\n    this.network = t, this.config = i;\n  }\n  /** provides access to the static attributes of the PlatformContext class */\n  utils() {\n    return this.constructor;\n  }\n  /** Create a new Protocol Client instance by protocol name using the RPC connection to determine the network */\n  getProtocol(t, i) {\n    return T(this.utils()._platform, t, i, this.config);\n  }\n  /** Get the underlying ProtocolInitializer to construct yourself */\n  getProtocolInitializer(t) {\n    return g(this.utils()._platform, t);\n  }\n  /** Look up transaction logs and parse out Wormhole messages */\n  async parseWormholeMessages(t, i, r) {\n    return (await this.getProtocol(\"WormholeCore\", i)).parseTransaction(r);\n  }\n}\nclass I {\n  constructor(t, i, r) {\n    e(this, \"network\");\n    e(this, \"chain\");\n    e(this, \"config\");\n    e(this, \"platform\");\n    e(this, \"rpc\");\n    // Cached Protocol clients\n    e(this, \"protocols\", /* @__PURE__ */ new Map());\n    /**\n     * Check to see if the Wormhole Core protocol is supported by this chain\n     * @returns a boolean indicating if this chain supports the Wormhole Core protocol\n     */\n    e(this, \"supportsWormholeCore\", () => this.supportsProtocol(\"WormholeCore\"));\n    /**\n     * Get the Wormhole Core protocol client for this chain\n     * @returns the Wormhole Core protocol client for this chain\n     */\n    e(this, \"getWormholeCore\", () => this.getProtocol(\"WormholeCore\"));\n    /**\n     * Check to see if the Token Bridge protocol is supported by this chain\n     * @returns a boolean indicating if this chain supports the Token Bridge protocol\n     */\n    e(this, \"supportsTokenBridge\", () => this.supportsProtocol(\"TokenBridge\"));\n    /**\n     * Get the Token Bridge protocol client for this chain\n     * @returns the Token Bridge protocol client for this chain\n     */\n    e(this, \"getTokenBridge\", () => this.getProtocol(\"TokenBridge\"));\n    /**\n     * Check to see if the Automatic Token Bridge protocol is supported by this chain\n     * @returns  a boolean indicating if this chain supports the Automatic Token Bridge protocol\n     */\n    e(this, \"supportsAutomaticTokenBridge\", () => this.supportsProtocol(\"AutomaticTokenBridge\"));\n    /**\n     * Get the Automatic Token Bridge protocol client for this chain\n     * @returns the Automatic Token Bridge protocol client for this chain\n     */\n    e(this, \"getAutomaticTokenBridge\", () => this.getProtocol(\"AutomaticTokenBridge\"));\n    /**\n     * Check to see if the Circle Bridge protocol is supported by this chain\n     * @returns a boolean indicating if this chain supports the Circle Bridge protocol\n     */\n    e(this, \"supportsCircleBridge\", () => this.supportsProtocol(\"CircleBridge\"));\n    /**\n     * Get the Circle Bridge protocol client for this chain\n     * @returns the Circle Bridge protocol client for this chain\n     */\n    e(this, \"getCircleBridge\", () => this.getProtocol(\"CircleBridge\"));\n    /**\n     * Check to see if the Automatic Circle Bridge protocol is supported by this chain\n     * @returns a boolean indicating if this chain supports the Automatic Circle Bridge protocol\n     */\n    e(this, \"supportsAutomaticCircleBridge\", () => this.supportsProtocol(\"AutomaticCircleBridge\"));\n    /**\n     * Get the Automatic Circle Bridge protocol client for this chain\n     * @returns the Automatic Circle Bridge protocol client for this chain\n     */\n    e(this, \"getAutomaticCircleBridge\", () => this.getProtocol(\"AutomaticCircleBridge\"));\n    /**\n     * Check to see if the IBC Bridge protocol is supported by this chain\n     * @returns a boolean indicating if this chain supports the IBC Bridge protocol\n     */\n    e(this, \"supportsIbcBridge\", () => this.supportsProtocol(\"IbcBridge\"));\n    /**\n     * Get the IBC Bridge protocol client for this chain\n     * @returns the IBC Bridge protocol client for this chain\n     */\n    e(this, \"getIbcBridge\", () => this.getProtocol(\"IbcBridge\"));\n    /**\n     * Check to see if the Portico Bridge protocol is supported by this chain\n     * @returns a boolean indicating if this chain supports the Portico Bridge protocol\n     */\n    e(this, \"supportsPorticoBridge\", () => this.supportsProtocol(\"PorticoBridge\"));\n    /**\n     * Get the Portico Bridge protocol client for this chain\n     * @returns the Portico Bridge protocol client for this chain\n     */\n    e(this, \"getPorticoBridge\", () => this.getProtocol(\"PorticoBridge\"));\n    this.config = i.config[t], this.platform = i, this.chain = this.config.key, this.network = this.config.network, this.rpc = r;\n  }\n  /**\n   * Get an RPC connection for this chain, uses the configuration passed in\n   * the initial constructor\n   *\n   * @returns the RPC connection for this chain\n   */\n  getRpc() {\n    return this.rpc = this.rpc ? this.rpc : this.platform.getRpc(this.chain), this.rpc;\n  }\n  /**\n   *  Get the number of decimals for a token\n   *\n   *  @param token the token to get the decimals for\n   *  @returns the number of decimals for the token\n   */\n  async getDecimals(t) {\n    if (m(t))\n      return this.config.nativeTokenDecimals;\n    if (this.config.tokenMap) {\n      const i = w({ chain: this.chain, address: t }), r = B(this.network, this.chain, i);\n      if (r)\n        return r.decimals;\n    }\n    return this.platform.utils().getDecimals(this.chain, await this.getRpc(), t);\n  }\n  /**\n   * Get the balance of a token for a given address\n   *\n   * @param walletAddr the address to get the balance for\n   * @param token the token to get the balance for\n   * @returns the balance of the token for the address\n   *\n   */\n  async getBalance(t, i) {\n    return this.platform.utils().getBalance(this.chain, await this.getRpc(), t, i);\n  }\n  /**\n   * Get the latest block number seen by the chain according to the RPC\n   *\n   * @returns the latest block number\n   */\n  async getLatestBlock() {\n    return this.platform.utils().getLatestBlock(await this.getRpc());\n  }\n  /**\n   * Get the latest _finalized_ block number seen by the chain according to the RPC\n   *\n   * @returns the latest finalized block number\n   */\n  async getLatestFinalizedBlock() {\n    return this.platform.utils().getLatestFinalizedBlock(await this.getRpc());\n  }\n  /**\n   * Parse the Wormhole Core messages from a transaction\n   *\n   * @param txid the transaction to parse\n   * @returns the Wormhole Core messages emitted by the transaction\n   */\n  async parseTransaction(t) {\n    return this.platform.parseWormholeMessages(this.chain, await this.getRpc(), t);\n  }\n  /**\n   *  Send a transaction and wait for it to be confirmed\n   *\n   * @param stxns the signed transaction to send\n   * @returns the transaction hashes of the sent transactions\n   */\n  async sendWait(t) {\n    return this.platform.utils().sendWait(this.chain, await this.getRpc(), t);\n  }\n  /**\n   * Get the token data from the local cache if available\n   * @param symbol the symbol of the token to get\n   * @returns the token data if available\n   */\n  getToken(t) {\n    if (this.config.tokenMap && t in this.config.tokenMap)\n      return this.config.tokenMap[t];\n  }\n  /**\n   * Get the token id of the wrapped token for the native gas token\n   *\n   * @returns the wrapped token for the native gas token\n   */\n  async getNativeWrappedTokenId() {\n    if (this.config.wrappedNative) {\n      const { address: i } = this.config.wrappedNative;\n      return { chain: this.chain, address: k(this.chain, i) };\n    }\n    const t = await this.getTokenBridge();\n    return { chain: this.chain, address: await t.getWrappedNative() };\n  }\n  /**\n   * Get the token account for a given address and token\n   *\n   * @remarks\n   * This is really only useful in the context of Solana but in order\n   * to provide a consistent interface, we provide it here.\n   *\n   * @param address the address to get the token account for\n   * @param token the token to get the token account for\n   * @returns the token account for the address and token\n   */\n  async getTokenAccount(t, i) {\n    return { chain: this.chain, address: t };\n  }\n  /**\n   * Check to see if a given protocol is supported by this chain\n   * by checking if it is registered in the platform and the configuration\n   * is available and correct\n   *\n   * @param protocolName the name of the Protocol to check for support\n   * @returns a boolean indicating if this protocol is supported\n   */\n  supportsProtocol(t) {\n    return C(this.chain, t);\n  }\n  /**\n   * Construct a protocol client for the given protocol\n   *\n   * Note: If no contracts are passed, we assume the default contracts should be used\n   * and that the protocol client is cacheable\n   *\n   * @param protocolName The name of the protocol to construct a client for\n   * @returns An instance of the protocol client that implements the protocol interface for the chain\n   */\n  async getProtocol(t, i, r) {\n    if (!i && this.protocols.has(t))\n      return this.protocols.get(t);\n    const n = i ? { ...this.config.contracts, ...i } : this.config.contracts, a = r ?? await this.getRpc(), h = this.platform.getProtocolInitializer(t);\n    let c;\n    if (r) {\n      if (i)\n        throw new Error(\"Custom contracts are currently not supported with custom rpc connection. Add the contracts to the base config.\");\n      c = await this.platform.getProtocol(t, a);\n    } else if (P(h)) {\n      const l = await h.getVersion(a, n);\n      c = new h(this.network, this.chain, a, n, l);\n    } else\n      c = new h(this.network, this.chain, a, n);\n    return i || this.protocols.set(t, c), c;\n  }\n}\nexport {\n  I as C,\n  W as P,\n  R as r\n};\n"],"names":["C","Object","defineProperty","l","s","t","n","x","enumerable","configurable","writable","value","h","O","BigInt","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","Error","u","constructor","this","instanceof","address","_","toUint8Array","Uint8Array","byteLength","byteSize","N","R","publicKey","isNaN","parseInt","w","zpad","I","toBytes","unwrap","toString","E","toNative","toUniversalAddress","toBigInt","decode","slice","toInt","equals","platform","m","T","y","P","A","L","super","B","_platform","getRpc","config","i","Algodv2","rpc","getChain","nativeTokenId","isSupportedChain","j","chainAddress","isNativeTokenId","o","chain","U","getDecimals","r","b","z","d","getAssetByID","do","a","modelsv2","Asset","from_obj_for_encoding","params","decimals","getBalance","c","accountInformation","f","Account","amount","accountAssetInformation","e","AssetHolding","getBalances","includes","map","async","native","g","reduce","assign","sendWait","v","decodeSignedTransaction","txn","txID","txId","sendRawTransaction","waitForConfirmation","PendingTransactionResponse","confirmedRound","getLatestBlock","status","NodeStatusResponse","lastRound","getLatestFinalizedBlock","chainFromChainId","k","chainFromRpc","versionsCheck","Version","genesisId","p","K","arguments","length","undefined","_chain","_debug","_account","F","addr","sign","transaction","tx","$","description","signer","console","log","_getDictForDisplay","push","signTxn","sk","M","Address","Platform","getSigner","protocols","WormholeCore","then","TokenBridge","D","Q","freeze","__proto__","default","Symbol","toStringTag","W","network","utils","getProtocol","fromRpc","getProtocolInitializer","parseWormholeMessages","parseTransaction","Map","supportsProtocol","key","nativeTokenDecimals","tokenMap","getToken","getNativeWrappedTokenId","wrappedNative","getTokenBridge","getWrappedNative","getTokenAccount","get","has","contracts","getVersion","set"],"sourceRoot":""}